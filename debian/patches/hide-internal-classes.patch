Author: IOhannes m zmÃ¶lnig
Description: remove "export" label (ASSIMP_API) from internal classes
Applied-Upstream: http://assimp.svn.sourceforge.net/viewvc/assimp?view=revision&revision=1066

--- assimp.orig/code/Assimp.cpp
+++ assimp/code/Assimp.cpp
@@ -388,7 +388,7 @@
 }
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API const aiScene* aiApplyPostProcessing(const aiScene* pScene,
+const aiScene* aiApplyPostProcessing(const aiScene* pScene,
 	unsigned int pFlags)
 {
 	const aiScene* sc = NULL;
@@ -434,7 +434,7 @@
 }
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API aiLogStream aiGetPredefinedLogStream(aiDefaultLogStream pStream,const char* file)
+aiLogStream aiGetPredefinedLogStream(aiDefaultLogStream pStream,const char* file)
 {
 	aiLogStream sout;
 
@@ -454,7 +454,7 @@
 }
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API void aiAttachLogStream( const aiLogStream* stream )
+void aiAttachLogStream( const aiLogStream* stream )
 {
 	ASSIMP_BEGIN_EXCEPTION_REGION();
 
@@ -473,7 +473,7 @@
 }
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API aiReturn aiDetachLogStream( const aiLogStream* stream)
+aiReturn aiDetachLogStream( const aiLogStream* stream)
 {
 	ASSIMP_BEGIN_EXCEPTION_REGION();
 
@@ -499,7 +499,7 @@
 }
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API void aiDetachAllLogStreams(void)
+void aiDetachAllLogStreams(void)
 {
 	ASSIMP_BEGIN_EXCEPTION_REGION();
 #ifdef AI_C_THREADSAFE
@@ -515,7 +515,7 @@
 }
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API void aiEnableVerboseLogging(aiBool d)
+void aiEnableVerboseLogging(aiBool d)
 {
 	if (!DefaultLogger::isNullLogger()) {
 		DefaultLogger::get()->setLogSeverity((d == AI_TRUE ? Logger::VERBOSE : Logger::NORMAL));
@@ -603,7 +603,7 @@
 
 // ------------------------------------------------------------------------------------------------
 // Importer::SetPropertyInteger
-ASSIMP_API void aiSetImportPropertyInteger(const char* szName, int value)
+void aiSetImportPropertyInteger(const char* szName, int value)
 {
 	ASSIMP_BEGIN_EXCEPTION_REGION();
 #ifdef AI_C_THREADSAFE
@@ -615,7 +615,7 @@
 
 // ------------------------------------------------------------------------------------------------
 // Importer::SetPropertyFloat
-ASSIMP_API void aiSetImportPropertyFloat(const char* szName, float value)
+void aiSetImportPropertyFloat(const char* szName, float value)
 {
 	ASSIMP_BEGIN_EXCEPTION_REGION();
 #ifdef AI_C_THREADSAFE
@@ -627,7 +627,7 @@
 
 // ------------------------------------------------------------------------------------------------
 // Importer::SetPropertyString
-ASSIMP_API void aiSetImportPropertyString(const char* szName,
+void aiSetImportPropertyString(const char* szName,
 	const C_STRUCT aiString* st)
 {
 	if (!st) {
@@ -644,7 +644,7 @@
 
 // ------------------------------------------------------------------------------------------------
 // Rotation matrix to quaternion
-ASSIMP_API void aiCreateQuaternionFromMatrix(aiQuaternion* quat,const aiMatrix3x3* mat)
+void aiCreateQuaternionFromMatrix(aiQuaternion* quat,const aiMatrix3x3* mat)
 {
 	ai_assert(NULL != quat && NULL != mat);
 	*quat = aiQuaternion(*mat);
@@ -652,7 +652,7 @@
 
 // ------------------------------------------------------------------------------------------------
 // Matrix decomposition
-ASSIMP_API void aiDecomposeMatrix(const aiMatrix4x4* mat,aiVector3D* scaling,
+void aiDecomposeMatrix(const aiMatrix4x4* mat,aiVector3D* scaling,
 	aiQuaternion* rotation,
 	aiVector3D* position)
 {
@@ -662,14 +662,14 @@
 
 // ------------------------------------------------------------------------------------------------
 // Matrix transpose
-ASSIMP_API void aiTransposeMatrix3(aiMatrix3x3* mat)
+void aiTransposeMatrix3(aiMatrix3x3* mat)
 {
 	ai_assert(NULL != mat);
 	mat->Transpose();
 }
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API void aiTransposeMatrix4(aiMatrix4x4* mat)
+void aiTransposeMatrix4(aiMatrix4x4* mat)
 {
 	ai_assert(NULL != mat);
 	mat->Transpose();
@@ -677,7 +677,7 @@
 
 // ------------------------------------------------------------------------------------------------
 // Vector transformation
-ASSIMP_API void aiTransformVecByMatrix3(C_STRUCT aiVector3D* vec, 
+void aiTransformVecByMatrix3(C_STRUCT aiVector3D* vec, 
 	const C_STRUCT aiMatrix3x3* mat)
 {
 	ai_assert(NULL != mat && NULL != vec);
@@ -685,7 +685,7 @@
 }
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API void aiTransformVecByMatrix4(C_STRUCT aiVector3D* vec, 
+void aiTransformVecByMatrix4(C_STRUCT aiVector3D* vec, 
 	const C_STRUCT aiMatrix4x4* mat)
 {
 	ai_assert(NULL != mat && NULL != vec);
@@ -694,7 +694,7 @@
 
 // ------------------------------------------------------------------------------------------------
 // Matrix multiplication
-ASSIMP_API void aiMultiplyMatrix4(
+void aiMultiplyMatrix4(
 	C_STRUCT aiMatrix4x4* dst, 
 	const C_STRUCT aiMatrix4x4* src)
 {
@@ -703,7 +703,7 @@
 }
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API void aiMultiplyMatrix3(
+void aiMultiplyMatrix3(
 	C_STRUCT aiMatrix3x3* dst, 
 	const C_STRUCT aiMatrix3x3* src)
 {
@@ -713,7 +713,7 @@
 
 // ------------------------------------------------------------------------------------------------
 // Matrix identity
-ASSIMP_API void aiIdentityMatrix3(
+void aiIdentityMatrix3(
 	C_STRUCT aiMatrix3x3* mat)
 {
 	ai_assert(NULL != mat);
@@ -721,7 +721,7 @@
 }
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API void aiIdentityMatrix4(
+void aiIdentityMatrix4(
 	C_STRUCT aiMatrix4x4* mat)
 {
 	ai_assert(NULL != mat);
--- assimp.orig/code/AssimpPCH.cpp
+++ assimp/code/AssimpPCH.cpp
@@ -18,25 +18,25 @@
 
 // ------------------------------------------------------------------------------------------------
 // Get legal string
-ASSIMP_API const char*  aiGetLegalString  ()	{
+const char*  aiGetLegalString  ()	{
 	return LEGAL_INFORMATION;
 }
 
 // ------------------------------------------------------------------------------------------------
 // Get Assimp minor version
-ASSIMP_API unsigned int aiGetVersionMinor ()	{
+unsigned int aiGetVersionMinor ()	{
 	return 0;
 }
 
 // ------------------------------------------------------------------------------------------------
 // Get Assimp major version
-ASSIMP_API unsigned int aiGetVersionMajor ()	{
+unsigned int aiGetVersionMajor ()	{
 	return 2;
 }
 
 // ------------------------------------------------------------------------------------------------
 // Get flags used for compilation
-ASSIMP_API unsigned int aiGetCompileFlags ()	{
+unsigned int aiGetCompileFlags ()	{
 
 	unsigned int flags = 0;
 
@@ -63,7 +63,7 @@
 #include "../revision.h"
 
 // ------------------------------------------------------------------------------------------------
-ASSIMP_API unsigned int aiGetVersionRevision ()
+unsigned int aiGetVersionRevision ()
 {
 	return SVNRevision;
 }
--- assimp.orig/code/BaseImporter.h
+++ assimp/code/BaseImporter.h
@@ -102,7 +102,7 @@
  *  std::vector and std::map in the public headers. Furthermore we are dropping
  *  any STL interface problems caused by mismatching STL settings. All
  *  size calculation are now done by us, not the app heap. */
-class ASSIMP_API ImporterPimpl 
+class ImporterPimpl 
 {
 public:
 
@@ -165,7 +165,7 @@
  * imports the given file. ReadFile is not overridable, it just calls 
  * InternReadFile() and catches any ImportErrorException that might occur.
  */
-class ASSIMP_API BaseImporter
+class BaseImporter
 {
 	friend class Importer;
 
@@ -417,7 +417,7 @@
  *  could, this has not yet been implemented at the moment).
  *
  *  @note The class may not be used by more than one thread*/
-class ASSIMP_API BatchLoader 
+class BatchLoader 
 {
 	// friend of Importer
 
--- assimp.orig/code/BaseProcess.h
+++ assimp/code/BaseProcess.h
@@ -60,7 +60,7 @@
  *  to provide additional information to other steps. This is primarily
  *  intended for cross-step optimizations.
  */
-class ASSIMP_API SharedPostProcessInfo
+class SharedPostProcessInfo
 {
 public:
 
@@ -211,7 +211,7 @@
  * should be executed. If the function returns true, the class' Execute() 
  * function is called subsequently.
  */
-class ASSIMP_API BaseProcess 
+class BaseProcess 
 {
 	friend class Importer;
 
--- assimp.orig/code/CalcTangentsProcess.h
+++ assimp/code/CalcTangentsProcess.h
@@ -57,7 +57,7 @@
  * because the joining of vertices also considers tangents and bitangents for 
  * uniqueness.
  */
-class ASSIMP_API CalcTangentsProcess : public BaseProcess
+class CalcTangentsProcess : public BaseProcess
 {
 	friend class Importer;
 
--- assimp.orig/code/ComputeUVMappingProcess.h
+++ assimp/code/ComputeUVMappingProcess.h
@@ -54,7 +54,7 @@
 /** ComputeUVMappingProcess - converts special mappings, such as spherical,
  *  cylindrical or boxed to proper UV coordinates for rendering.
 */
-class ASSIMP_API ComputeUVMappingProcess : public BaseProcess
+class ComputeUVMappingProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::ComputeUVMappingTest; // grant the unit test full access to us
--- assimp.orig/code/ConvertToLHProcess.h
+++ assimp/code/ConvertToLHProcess.h
@@ -67,7 +67,7 @@
  *
  * @note RH-LH and LH-RH is the same, so this class can be used for both
  */
-class ASSIMP_API MakeLeftHandedProcess : public BaseProcess
+class MakeLeftHandedProcess : public BaseProcess
 {
 	friend class Importer;
 
@@ -118,7 +118,7 @@
 // ---------------------------------------------------------------------------
 /** Postprocessing step to flip the face order of the imported data
  */
-class ASSIMP_API FlipWindingOrderProcess : public BaseProcess
+class FlipWindingOrderProcess : public BaseProcess
 {
 	friend class Importer;
 
@@ -142,7 +142,7 @@
 // ---------------------------------------------------------------------------
 /** Postprocessing step to flip the UV coordinate system of the import data
  */
-class ASSIMP_API FlipUVsProcess : public BaseProcess
+class FlipUVsProcess : public BaseProcess
 {
 	friend class Importer;
 
--- assimp.orig/code/DefaultProgressHandler.h
+++ assimp/code/DefaultProgressHandler.h
@@ -49,7 +49,7 @@
 
 // ------------------------------------------------------------------------------------
 /** @brief Internal default implementation of the #ProgressHandler interface. */
-class ASSIMP_API DefaultProgressHandler 
+class DefaultProgressHandler 
 	: public ProgressHandler	{
 
 	
--- assimp.orig/code/Exceptional.h
+++ assimp/code/Exceptional.h
@@ -52,7 +52,7 @@
 /** FOR IMPORTER PLUGINS ONLY: Simple exception class to be thrown if an 
  *  unrecoverable error occurs while importing. Loading APIs return
  *  NULL instead of a valid aiScene then.  */
-class ASSIMP_API DeadlyImportError
+class DeadlyImportError
 	: public runtime_error
 {
 public:
--- assimp.orig/code/FindDegenerates.h
+++ assimp/code/FindDegenerates.h
@@ -53,7 +53,7 @@
 // ---------------------------------------------------------------------------
 /** FindDegeneratesProcess: Searches a mesh for degenerated triangles.
 */
-class ASSIMP_API FindDegeneratesProcess : public BaseProcess
+class FindDegeneratesProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::FindDegeneratesProcessTest; // grant the unit test full access to us
--- assimp.orig/code/FindInstancesProcess.h
+++ assimp/code/FindInstancesProcess.h
@@ -105,7 +105,7 @@
 // ---------------------------------------------------------------------------
 /** @brief A post-processing steps to search for instanced meshes
 */
-class ASSIMP_API FindInstancesProcess : public BaseProcess
+class FindInstancesProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::FindInstancesProcessTest; 
--- assimp.orig/code/FindInvalidDataProcess.h
+++ assimp/code/FindInvalidDataProcess.h
@@ -56,7 +56,7 @@
  *
  *  Originally this was a workaround for some models written by Blender
  *  which have zero normal vectors. */
-class ASSIMP_API FindInvalidDataProcess 
+class FindInvalidDataProcess 
 	: public BaseProcess
 {
 	friend class Importer;
--- assimp.orig/code/FixNormalsStep.h
+++ assimp/code/FixNormalsStep.h
@@ -55,7 +55,7 @@
  * vectors of an object are facing inwards. In this case they will be
  * flipped.
  */
-	class ASSIMP_API FixInfacingNormalsProcess : public BaseProcess
+	class FixInfacingNormalsProcess : public BaseProcess
 {
 	friend class Importer;
 
--- assimp.orig/code/GenFaceNormalsProcess.h
+++ assimp/code/GenFaceNormalsProcess.h
@@ -51,7 +51,7 @@
 // ---------------------------------------------------------------------------
 /** The GenFaceNormalsProcess computes face normals for all faces of all meshes
 */
-class ASSIMP_API GenFaceNormalsProcess : public BaseProcess
+class GenFaceNormalsProcess : public BaseProcess
 {
 	friend class Importer;
 
--- assimp.orig/code/GenVertexNormalsProcess.h
+++ assimp/code/GenVertexNormalsProcess.h
@@ -53,7 +53,7 @@
 // ---------------------------------------------------------------------------
 /** The GenFaceNormalsProcess computes vertex normals for all vertizes
 */
-class ASSIMP_API GenVertexNormalsProcess : public BaseProcess
+class GenVertexNormalsProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::GenNormalsTest;
--- assimp.orig/code/ImproveCacheLocality.h
+++ assimp/code/ImproveCacheLocality.h
@@ -58,7 +58,7 @@
  *
  *  @note This step expects triagulated input data.
  */
-class ASSIMP_API ImproveCacheLocalityProcess : public BaseProcess
+class ImproveCacheLocalityProcess : public BaseProcess
 {
 	friend class Importer;
 
--- assimp.orig/code/JoinVerticesProcess.h
+++ assimp/code/JoinVerticesProcess.h
@@ -61,7 +61,7 @@
  * erases all but one of the copies. This usually reduces the number of vertices
  * in a mesh by a serious amount and is the standard form to render a mesh.
  */
-class ASSIMP_API JoinVerticesProcess : public BaseProcess
+class JoinVerticesProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class JoinVerticesTest;
--- assimp.orig/code/LimitBoneWeightsProcess.h
+++ assimp/code/LimitBoneWeightsProcess.h
@@ -69,7 +69,7 @@
 * The other weights on this bone are then renormalized to assure the sum weight
 * to be 1.
 */
-class ASSIMP_API LimitBoneWeightsProcess : public BaseProcess
+class LimitBoneWeightsProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::LimitBoneWeightsTest;
--- assimp.orig/code/MakeVerboseFormat.h
+++ assimp/code/MakeVerboseFormat.h
@@ -61,7 +61,7 @@
  * The step has been added because it was required by the viewer, however
  * it has been moved to the main library since others might find it
  * useful, too. */
-class ASSIMP_API MakeVerboseFormatProcess : public BaseProcess
+class MakeVerboseFormatProcess : public BaseProcess
 {
 	friend class Importer;
 
--- assimp.orig/code/MaterialSystem.cpp
+++ assimp/code/MaterialSystem.cpp
@@ -282,7 +282,7 @@
 
 // ------------------------------------------------------------------------------------------------
 // Get the number of textures on a particular texture stack
-ASSIMP_API unsigned int aiGetMaterialTextureCount(const C_STRUCT aiMaterial* pMat,  
+unsigned int aiGetMaterialTextureCount(const C_STRUCT aiMaterial* pMat,  
 	C_ENUM aiTextureType type)
 {
 	ai_assert (pMat != NULL);
--- assimp.orig/code/MaterialSystem.h
+++ assimp/code/MaterialSystem.h
@@ -52,7 +52,7 @@
  *
  *  Intended to be used to fill an aiMaterial structure more easily.
  */
-class ASSIMP_API MaterialHelper : public ::aiMaterial
+class MaterialHelper : public ::aiMaterial
 {
 public:
 
--- assimp.orig/code/OptimizeGraph.h
+++ assimp/code/OptimizeGraph.h
@@ -61,7 +61,7 @@
  *  @see aiProcess_OptimizeGraph for a detailed description of the
  *  algorithm being applied.
  */
-class ASSIMP_API OptimizeGraphProcess : public BaseProcess
+class OptimizeGraphProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::OptimizeGraphProcessTest;
--- assimp.orig/code/OptimizeMeshes.h
+++ assimp/code/OptimizeMeshes.h
@@ -59,7 +59,7 @@
  *
  *  @note Instanced meshes are currently not processed.
  */
-class ASSIMP_API OptimizeMeshesProcess : public BaseProcess
+class OptimizeMeshesProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::OptimizeMeshesProcessTest;
--- assimp.orig/code/PretransformVertices.h
+++ assimp/code/PretransformVertices.h
@@ -56,7 +56,7 @@
  *  and removes the whole graph. The output is a list of meshes, one for
  *  each material.
 */
-class ASSIMP_API PretransformVertices : public BaseProcess
+class PretransformVertices : public BaseProcess
 {
 	friend class Importer;
 	friend class ::PretransformVerticesTest;
--- assimp.orig/code/RemoveComments.h
+++ assimp/code/RemoveComments.h
@@ -55,7 +55,7 @@
  *  to those in C or C++ so this code has been moved to a separate
  *  module.
  */
-class ASSIMP_API CommentRemover
+class CommentRemover
 {
 	// class cannot be instanced
 	CommentRemover() {}
--- assimp.orig/code/RemoveRedundantMaterials.h
+++ assimp/code/RemoveRedundantMaterials.h
@@ -54,7 +54,7 @@
 /** RemoveRedundantMatsProcess: Postprocessing steo to remove redundant 
  *  materials from the imported scene.
  */
-class ASSIMP_API RemoveRedundantMatsProcess : public BaseProcess
+class RemoveRedundantMatsProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::RemoveRedundantMatsTest; // grant the unit test full access to us
--- assimp.orig/code/RemoveVCProcess.h
+++ assimp/code/RemoveVCProcess.h
@@ -52,7 +52,7 @@
 /** RemoveVCProcess: Class to exclude specific parts of the data structure
  *  from further processing by removing them,
 */
-class ASSIMP_API RemoveVCProcess : public BaseProcess
+class RemoveVCProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::RemoveVCProcessTest;
--- assimp.orig/code/SceneCombiner.h
+++ assimp/code/SceneCombiner.h
@@ -178,7 +178,7 @@
  * The class is currently being used by various postprocessing steps
  * and loaders (ie. LWS).
  */
-class ASSIMP_API SceneCombiner
+class SceneCombiner
 {
 	// class cannot be instanced
 	SceneCombiner() {}
--- assimp.orig/code/ScenePreprocessor.h
+++ assimp/code/ScenePreprocessor.h
@@ -54,7 +54,7 @@
  *  importer, such as aiMesh::mPrimitiveTypes.
 */
 // ----------------------------------------------------------------------------------
-class ASSIMP_API ScenePreprocessor
+class ScenePreprocessor
 {
 	// Make ourselves a friend of the corresponding test unit.
 	friend class ::ScenePreprocessorTest;
--- assimp.orig/code/SkeletonMeshBuilder.h
+++ assimp/code/SkeletonMeshBuilder.h
@@ -62,7 +62,7 @@
  * the resembles the node hierarchy. This is useful for file formats
  * that don't carry any mesh data but only animation data.
  */
-class ASSIMP_API SkeletonMeshBuilder
+class SkeletonMeshBuilder
 {
 public:
 
--- assimp.orig/code/SortByPTypeProcess.h
+++ assimp/code/SortByPTypeProcess.h
@@ -55,7 +55,7 @@
  *  A mesh with 5 lines, 3 points and 145 triangles would be split in 3 
  * submeshes.
 */
-class ASSIMP_API SortByPTypeProcess : public BaseProcess
+class SortByPTypeProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::SortByPTypeProcessTest; // grant the unit test full access to us
--- assimp.orig/code/SpatialSort.h
+++ assimp/code/SpatialSort.h
@@ -56,7 +56,7 @@
  * time, with O(n) worst case complexity when all vertices lay on the plane. The plane is chosen
  * so that it avoids common planes in usual data sets. */
 // ------------------------------------------------------------------------------------------------
-class ASSIMP_API SpatialSort
+class SpatialSort
 {
 public:
 
--- assimp.orig/code/SplitLargeMeshes.h
+++ assimp/code/SplitLargeMeshes.h
@@ -81,7 +81,7 @@
  * Applied BEFORE the JoinVertices-Step occurs.
  * Returns NON-UNIQUE vertices, splits by triangle number.
 */
-class ASSIMP_API SplitLargeMeshesProcess_Triangle : public BaseProcess
+class SplitLargeMeshesProcess_Triangle : public BaseProcess
 {
 	friend class Importer;
 	friend class SplitLargeMeshesProcess_Vertex;
@@ -153,7 +153,7 @@
  * Applied AFTER the JoinVertices-Step occurs.
  * Returns UNIQUE vertices, splits by vertex number.
 */
-class ASSIMP_API SplitLargeMeshesProcess_Vertex : public BaseProcess
+class SplitLargeMeshesProcess_Vertex : public BaseProcess
 {
 	friend class Importer;
 	friend class ::SplitLargeMeshesTest;
--- assimp.orig/code/StandardShapes.h
+++ assimp/code/StandardShapes.h
@@ -53,7 +53,7 @@
 /** \brief Helper class to generate vertex buffers for standard geometric
  *  shapes, such as cylinders, cones, boxes, spheres, elipsoids ... .
  */
-class ASSIMP_API StandardShapes
+class StandardShapes
 {
 	// class cannot be instanced
 	StandardShapes() {}
--- assimp.orig/code/Subdivision.h
+++ assimp/code/Subdivision.h
@@ -47,7 +47,7 @@
 /** Helper class to evaluate subdivision surfaces. Different algorithms
  *  are provided for choice. */
 // ------------------------------------------------------------------------------
-class ASSIMP_API Subdivider
+class Subdivider
 {
 public:
 
--- assimp.orig/code/TargetAnimation.h
+++ assimp/code/TargetAnimation.h
@@ -54,7 +54,7 @@
  *  Missing tracks are interpolated. This is a helper class for
  *  TargetAnimationHelper, but it can be freely used for other purposes.
 */
-class ASSIMP_API KeyIterator
+class KeyIterator
 {
 public:
 
@@ -126,7 +126,7 @@
  * channel for the camera/spot light itself and a separate position
  * animation channels specifying the position of the camera/spot light
  * look-at target */
-class ASSIMP_API TargetAnimationHelper
+class TargetAnimationHelper
 {
 public:
 
--- assimp.orig/code/TextureTransform.h
+++ assimp/code/TextureTransform.h
@@ -188,7 +188,7 @@
 /** Helper step to compute final UV coordinate sets if there are scalings
  *  or rotations in the original data read from the file.
 */
-class ASSIMP_API TextureTransformStep : public BaseProcess
+class TextureTransformStep : public BaseProcess
 {
 public:
 
--- assimp.orig/code/TriangulateProcess.h
+++ assimp/code/TriangulateProcess.h
@@ -57,7 +57,7 @@
  * into triangles. You usually want this to happen because the graphics cards
  * need their data as triangles.
  */
-class ASSIMP_API TriangulateProcess : public BaseProcess
+class TriangulateProcess : public BaseProcess
 {
 	friend class Importer;
 	friend class ::TriangulateProcessTest; // grant the unit test full access to us
--- assimp.orig/code/ValidateDataStructure.h
+++ assimp/code/ValidateDataStructure.h
@@ -62,7 +62,7 @@
 /** Validates the whole ASSIMP scene data structure for correctness.
  *  ImportErrorException is thrown of the scene is corrupt.*/
 // --------------------------------------------------------------------------------------
-class ASSIMP_API ValidateDSProcess : public BaseProcess
+class ValidateDSProcess : public BaseProcess
 {
 	friend class Importer;
 
--- assimp.orig/code/VertexTriangleAdjacency.h
+++ assimp/code/VertexTriangleAdjacency.h
@@ -56,7 +56,7 @@
  *  @note Although it is called #VertexTriangleAdjacency, the current version does also
  *    support arbitrary polygons. */
 // --------------------------------------------------------------------------------------------
-class ASSIMP_API VertexTriangleAdjacency
+class VertexTriangleAdjacency
 {
 public:
 
