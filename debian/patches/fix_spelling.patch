Author: IOhannes m zmÃ¶lnig
Description: fixed minor spelling errors
 .e.g ommitted->omitted and splitted->split
Forwarded: https://sourceforge.net/tracker/?func=detail&aid=3393728&group_id=226462&atid=1067634
--- assimp.orig/code/BlenderScene.h
+++ assimp/code/BlenderScene.h
@@ -421,7 +421,7 @@
 	};
 
 	enum Flags {
-		// some ommitted
+		// some omitted
 		FLAGS_SubsurfUV		=1<<3
 	};
 
--- assimp.orig/code/COBLoader.cpp
+++ assimp/code/COBLoader.cpp
@@ -387,7 +387,7 @@
 	ChunkInfo ci;
 	for(LineSplitter splitter(*stream);splitter;++splitter) {
 
-		// add all chunks to be recognized here. /else ../ ommitted intentionally.
+		// add all chunks to be recognized here. /else ../ omitted intentionally.
 		if (splitter.match_start("PolH ")) {
 			ReadChunkInfo_Ascii(ci,splitter);
 			ReadPolH_Ascii(out,splitter,ci);
--- assimp.orig/code/MDLLoader.h
+++ assimp/code/MDLLoader.h
@@ -78,7 +78,7 @@
  *   </ul>
  *  These formats are partially identical and it would be possible to load
  *  them all with a single 1000-line function-beast. However, it has been
- *  splitted to several code paths to make the code easier to read and maintain.
+ *  split into several code paths to make the code easier to read and maintain.
 */
 class MDLImporter : public BaseImporter
 {
--- assimp.orig/code/OptimizeMeshes.h
+++ assimp/code/OptimizeMeshes.h
@@ -124,7 +124,7 @@
 	/** @brief Specify a maximum size of a single output mesh.
 	 *  
 	 *  If a single input mesh already exceeds this limit, it won't
-	 *  be splitted.
+	 *  be split.
 	 *  @param verts Maximum number of vertices per mesh
 	 *  @param faces Maximum number of faces per mesh
 	 */
--- assimp.orig/code/SplitLargeMeshes.cpp
+++ assimp/code/SplitLargeMeshes.cpp
@@ -84,7 +84,7 @@
 
 	if (avList.size() != pScene->mNumMeshes)
 	{
-		// it seems something has been splitted. rebuild the mesh list
+		// it seems something has been split. rebuild the mesh list
 		delete[] pScene->mMeshes;
 		pScene->mNumMeshes = (unsigned int)avList.size();
 		pScene->mMeshes = new aiMesh*[avList.size()];
@@ -94,7 +94,7 @@
 
 		// now we need to update all nodes
 		this->UpdateNode(pScene->mRootNode,avList);
-		DefaultLogger::get()->info("SplitLargeMeshesProcess_Triangle finished. Meshes have been splitted");
+		DefaultLogger::get()->info("SplitLargeMeshesProcess_Triangle finished. Meshes have been split");
 	}
 	else DefaultLogger::get()->debug("SplitLargeMeshesProcess_Triangle finished. There was nothing to do");
 	return;
@@ -227,7 +227,7 @@
 				pcMesh->mBones = new aiBone*[pMesh->mNumBones];
 
 				// iterate through all bones of the mesh and find those which
-				// need to be copied to the splitted mesh
+				// need to be copied to the split mesh
 				std::vector<aiVertexWeight> avTempWeights;
 				for (unsigned int p = 0; p < pcMesh->mNumBones;++p)
 				{
@@ -382,7 +382,7 @@
 
 	if (avList.size() != pScene->mNumMeshes)
 	{
-		// it seems something has been splitted. rebuild the mesh list
+		// it seems something has been split. rebuild the mesh list
 		delete[] pScene->mMeshes;
 		pScene->mNumMeshes = (unsigned int)avList.size();
 		pScene->mMeshes = new aiMesh*[avList.size()];
@@ -392,7 +392,7 @@
 
 		// now we need to update all nodes
 		SplitLargeMeshesProcess_Triangle::UpdateNode(pScene->mRootNode,avList);
-		DefaultLogger::get()->info("SplitLargeMeshesProcess_Vertex finished. Meshes have been splitted");
+		DefaultLogger::get()->info("SplitLargeMeshesProcess_Vertex finished. Meshes have been split");
 	}
 	else DefaultLogger::get()->debug("SplitLargeMeshesProcess_Vertex finished. There was nothing to do");
 	return;
--- assimp.orig/code/XFileImporter.h
+++ assimp/code/XFileImporter.h
@@ -118,7 +118,7 @@
 		const XFile::Node* pNode);
 
 	// -------------------------------------------------------------------
-	/** Converts all meshes in the given mesh array. Each mesh is splitted 
+	/** Converts all meshes in the given mesh array. Each mesh is split 
 	 * up per material, the indices of the generated meshes are stored in 
 	 * the node structure.
 	 * @param pScene The scene to construct the return data in.
--- assimp.orig/code/assbin_chunks.h
+++ assimp/code/assbin_chunks.h
@@ -153,7 +153,7 @@
 
 [[aiNode]]
 
-   - mParent is ommitted
+   - mParent is omitted
 
 [[aiLight]]
 
@@ -162,7 +162,7 @@
 
 [[aiMaterial]]
 
-   - mNumAllocated is ommitted, for obvious reasons :-)
+   - mNumAllocated is omitted, for obvious reasons :-)
 
 
  @endverbatim*/
--- assimp.orig/doc/dox_cmd.h
+++ assimp/doc/dox_cmd.h
@@ -204,7 +204,7 @@
 <p>
 <tt>
 out<br></tt><br>
-Optional. Relative or absolute path to write the output dump to. If it is ommitted,
+Optional. Relative or absolute path to write the output dump to. If it is omitted,
 the dump is written to <tt>&lt;model&gt;-dump.txt</tt>
 </p>
 
@@ -281,7 +281,7 @@
 <tt>
 out<br></tt><br>
 Optional. Relative or absolute path to write the output images to. If the file name is
-ommitted the output images are named <tt><model-filename></tt><br>
+omitted the output images are named <tt><model-filename></tt><br>
 The suffix <tt>_img&lt;n&gt;</tt> is appended to the file name if the -s switch is not specified 
 (where <tt>&lt;n&gt;</tt> is the zero-based index of the texture in the model file).<br>
 
--- assimp.orig/tools/assimp_cmd/ImageExtractor.cpp
+++ assimp/tools/assimp_cmd/ImageExtractor.cpp
@@ -49,7 +49,7 @@
 "assimp extract <model> [<out>] [-t<n>] [-f<fmt>] [-ba] [-s] [common parameters]\n"
 "\t -ba   Writes BMP's with alpha channel\n"
 "\t -t<n> Zero-based index of the texture to be extracted \n"
-"\t -f<f> Specify the file format if <out> is ommitted  \n"
+"\t -f<f> Specify the file format if <out> is omitted  \n"
 "\t[See the assimp_cmd docs for a full list of all common parameters]  \n"
 "\t -cfast    Fast post processing preset, runs just a few important steps \n"
 "\t -cdefault Default post processing: runs all recommended steps\n"
